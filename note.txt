Decorators
----------
- @ is used to denote Decorators
- used to define metadata
- a data inside another data
- structure is always same, the content changes 
- functionality is same



- in angular class based components
- we have to export a class before we import that class in another file

- we call html, css in typescript file


- ngOnInit() - abstract method, we don't have to call it separately, and is a life cycle hook in angular thet is used to perform initialization tasks for a component. It is a method that is called after the component has been created and the input have been bound for the first time. ngOnInit() method is a part of "OnInit" interface in Angular. when a component implements this interface, it must provide an implementation for the "ngOnInit()" method


life cycle of angular(working cycle)
--------------------
1 - constructor - no need to call
2 - ngOnInit() - no need to call
 - other methods


Angular - data binding
----------------------
how a ts file share data with html
- files are already connected

ts to html
---------
ts file - component
html - view

1 - one way data binding
------------------------


1.1 - component to view data sharing:
------------------------------------

   1.1.1 - String Interpollation {{}}

   if the data is string data we can use this, even if the data is another type we can conver this to string and use this  

   we can't use this inside constructor , this method should work before the content

   data: string or data: any

   constructor(){
      this.data = "content"
   }

   1.1.2 - property binding []

   [propertyName] = "bindingData"

1.2 view to component(html to ts)
--------------------------------

   1.2.1 - event binding  (eventName) = "methodName()" eg:click

   it is "click" in ts as "onclick in js
   the method we call in html must be defined inside class component of typeScript

   1.2.2 - $event binding  (eventName) = "methodName($event)" eg: change - for accessing changed value.
   we get data when this event works

   <input (change) = "unameChange($event)" in html file
   
   class something {
      uname:any

      unameChange(event:any){
         this.uname = event.target.value
      }
   }

   1.2.3 - data binding with template rendering variable eg: #variable

   <input #uname >
   <input #psw >

   <button (click) = "login(uname,psw)"  in html

   login(a:any, b:any){
      console.log(a.value, b.value);

      alert("login clicked")
   }  in ts

   if we want to store the values to variables:

   <input #uname>
   <input #psw>

   <button (click) = "input(uname,psw)" in html


   class something{
      user:any
      password:any
   }

   input(a.value, b.value){
      this.user = a.value
      this.password = b.value

      console.log(this.user, this.password)
   }

2 - two way data binding
------------------------

we need to intall another module

html to ts(view to component)

- formsModule - module(file)
-----------

2.1 - ngModel(method)  [(ngModel)] - event inside property module
[(ngModel)] ="variable"

package - collection of modules(folder)
module - collection of class(file)
class - collection of variables and methods

should be written inside app.module.ts inside import field

<input [(ngModel)] = "uname" id = "us"
name = "uname"...>
<input [(ngModel)] = "psw" id = "ps" name = "psw"...>   (imp - id and name attributes are must for this kind of binding)

<button type = "button" (click) = "login()"

class anything{
   uname:any
   psw:any


   login(){
      alert(this.uname)
      alert(this.psw)
   }
}


Angular Services
----------------
data communication between components

component1, component2, etc
components cannot access data from one another 

service is the common location that all the components can access data from (service is a ts file)
the common data needed for all the components should be in service file
one service file for one module


command for creating service

- ng g s serviceFileName(ng = angular, g = generate, s = service)

dependancy injection
--------------------
 - to use methods and variables from a class to another component class

   we can determine who to access data, if public, all the classes inside the module(file), if private only that class the injected class defined can use it.
  accessSpecifier - public, private

  if we do dependency injection public, it can be used by all the classes in the module can use the injected class

  if the dependency injection is private it can only be used inside the class of a module it defined

  api calls are done inside service file
  one service for one module
   (dependancy injection is used when we want any data or methods in a perticular component to be used inside another component)
  

service file is created ./src/app/service

accessSpecifier referenceName:className

constructor(accessSpecifier referenceName:className){

   sdata = "service data"

   constructor(){

   }

   checkData(){
      return "hello hi"
   }
}

first import class DataService to class NewBankComponents

in data.service file

export class DataService{

}

in NewBankComponent file make an object of class DataService inside constructor


- export class NewbankComponent implements OnInit{

   constructor(private ds:DataService){

   }

   ngOnInit():void {}

   login(){

      alert(this.ds.sdata)
      alert(this.ds.checkData())
   }
}